//! Lambda expression definition with comments starting with //

/// match blank characters
blank = @{ " "+ }

/// match line feed
newline = { NEWLINE }

CJK = { HAN | HIRAGANA | KATAKANA | HANGUL | BOPOMOFO }

/// match an identifier (starting with letters or underscore, followed by numbers, letters or underscore)
ident = @{ (ASCII_ALPHA | CJK | "_") ~ (ASCII_ALPHANUMERIC | CJK | "_")* }

/// lambda expression
exp = { app | bounded_exp | abs }

/// lambda expression with parentheses
bounded_exp = { ident | "(" ~ blank? ~ (abs | app) ~ blank? ~ ")" }

/// the last expression in application chain
tail_exp = { bounded_exp | abs }

/// '.'
dot = { "." }

/// lambda symbol
lamsym = { "\\" }

/// abstraction
abs = { lamsym ~ ident ~ blank? ~ dot ~ blank? ~ exp }

/// application 
app = {
    bounded_exp ~ (blank ~ tail_exp)+
}

/// '='
eq = { "=" }

/// lambda expression alias (format: ident = exp)
def = { ident ~ blank? ~ eq ~ blank? ~ exp }

/// comment starter
com = @{ "//" ~ (!NEWLINE ~ ANY)* }

/// single line statement
line = { blank? ~ (def ~ blank?)? ~ com? }

/// multiline statement 
file = { SOI ~ (line ~ newline)* ~ line ~ EOI }